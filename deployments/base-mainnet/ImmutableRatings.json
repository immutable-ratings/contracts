{
  "address": "0xE07f02ff153d2e4F20cEbcEe7C3478243Bab442f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenUp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDown",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyURL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatingAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MarketAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RatingDownCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RatingUpCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "ReceiverUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_RATING_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEED",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating",
          "name": "rating",
          "type": "tuple"
        }
      ],
      "name": "createDownRating",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating",
          "name": "rating",
          "type": "tuple"
        }
      ],
      "name": "createUpRating",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "getMarketAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserRatings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "marketToUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "previewPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "setIsPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDown",
      "outputs": [
        {
          "internalType": "contract TDN",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenUp",
      "outputs": [
        {
          "internalType": "contract TUP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "urlToMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa668535c34af37f696f4eb1da45bd8c98c830c7c8961a6a24fa3df94e131d141",
  "receipt": {
    "to": null,
    "from": "0x78a7d1bF8B952273b2853d01fc76b0114ccE694a",
    "contractAddress": "0xE07f02ff153d2e4F20cEbcEe7C3478243Bab442f",
    "transactionIndex": 184,
    "gasUsed": "1368509",
    "logsBloom": "0x
    "blockHash": "0xc986316bffa43508b47cbab6578ca3989f591b3ec7aad5db8a85b1f51abaa0b4",
    "transactionHash": "0xa668535c34af37f696f4eb1da45bd8c98c830c7c8961a6a24fa3df94e131d141",
    "logs": [
      {
        "transactionIndex": 184,
        "blockNumber": 29166956,
        "transactionHash": "0xa668535c34af37f696f4eb1da45bd8c98c830c7c8961a6a24fa3df94e131d141",
        "address": "0xE07f02ff153d2e4F20cEbcEe7C3478243Bab442f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000078a7d1bf8b952273b2853d01fc76b0114cce694a"
        ],
        "data": "0x",
        "logIndex": 583,
        "blockHash": "0xc986316bffa43508b47cbab6578ca3989f591b3ec7aad5db8a85b1f51abaa0b4"
      }
    ],
    "blockNumber": 29166956,
    "cumulativeGasUsed": "34644755",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE6D3d08a6519F1346344bba0F25A6fE7aB50F06C",
    "0x4461a66A7B5eCdBBE0bbBf09b41816f94c4834b2",
    "0xc1Ec5b421905290F477C741ADf97c062921AA18A"
  ],
  "numDeployments": 1,
  "solcInputHash": "d7650786dfb4ed1dec321014e91221ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenUp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDown\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyURL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatingAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MarketAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RatingDownCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RatingUpCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"ReceiverUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_RATING_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating\",\"name\":\"rating\",\"type\":\"tuple\"}],\"name\":\"createDownRating\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating\",\"name\":\"rating\",\"type\":\"tuple\"}],\"name\":\"createUpRating\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"marketToUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"previewPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDown\",\"outputs\":[{\"internalType\":\"contract TDN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUp\",\"outputs\":[{\"internalType\":\"contract TUP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"urlToMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"immutable-ratings\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"params\":{\"_receiver\":\"The address of the fee receiver\",\"_tokenDown\":\"The address of the TDN token\",\"_tokenUp\":\"The address of the TUP token\"}},\"createDownRating((string,uint256))\":{\"params\":{\"rating\":\"The rating to create\"}},\"createMarket(string)\":{\"params\":{\"url\":\"The URL for the market\"}},\"createUpRating((string,uint256))\":{\"params\":{\"rating\":\"The rating to create\"}},\"getMarketAddress(string)\":{\"params\":{\"url\":\"The URL for the market\"},\"returns\":{\"_0\":\"marketAddress The address of the created market\"}},\"getUserRatings(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"total\":\"The total number of ratings\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"previewPayment(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to rate\"},\"returns\":{\"_0\":\"price The price of the rating\"}},\"recoverERC20(address,address)\":{\"params\":{\"recipient\":\"The address of the recipient\",\"tokenAddress\":\"The address of the token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setIsPaused(bool)\":{\"params\":{\"_isPaused\":\"Whether to pause the contract\"}},\"setReceiver(address)\":{\"params\":{\"_receiver\":\"The address of the fee receiver\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"}},\"stateVariables\":{\"MIN_RATING_AMOUNT\":{\"details\":\"The minimum amount of tokens that can be rated\"},\"SEED\":{\"details\":\"Seed for market creation\"},\"VERSION\":{\"details\":\"This contract is immutable and non-upgradeable. Further versions of this contract will be deployed independently.\"},\"isPaused\":{\"details\":\"Whether the contract is paused\"},\"marketToUrl\":{\"details\":\"Mapping of active markets to their URLs\"},\"ratingPrice\":{\"details\":\"The price of a rating in ether\"},\"receiver\":{\"details\":\"Address of the fee receiver\"},\"tokenDown\":{\"details\":\"The TDN token. Represents downvotes.\"},\"tokenUp\":{\"details\":\"The TUP token. Represents upvotes.\"},\"urlToMarket\":{\"details\":\"Mapping of URLs to their markets\"}},\"title\":\"Immutable Ratings\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDownRating((string,uint256))\":{\"notice\":\"Creates a down rating for a single market\"},\"createMarket(string)\":{\"notice\":\"Creates a new market for a URL\"},\"createUpRating((string,uint256))\":{\"notice\":\"Creates an up rating for a single market\"},\"getMarketAddress(string)\":{\"notice\":\"Gets the market address for a URL\"},\"getUserRatings(address)\":{\"notice\":\"Returns the total number of immutables ratings (IRs) for a user\"},\"previewPayment(uint256)\":{\"notice\":\"Preview the payment for a rating\"},\"recoverERC20(address,address)\":{\"notice\":\"Recovers ERC20 tokens from the contract\"},\"setIsPaused(bool)\":{\"notice\":\"Pauses or unpauses the contract\"},\"setReceiver(address)\":{\"notice\":\"Sets the fee receiver address\"}},\"notice\":\"Core controller contract for the Immutable Ratings platform\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableRatings.sol\":\"ImmutableRatings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/ImmutableRatings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {TUP} from \\\"./TUP.sol\\\";\\nimport {TDN} from \\\"./TDN.sol\\\";\\n\\n/**\\n * @title Immutable Ratings\\n * @author immutable-ratings\\n * @notice Core controller contract for the Immutable Ratings platform\\n */\\ncontract ImmutableRatings is Ownable2Step, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The TUP token. Represents upvotes.\\n    TUP public immutable tokenUp;\\n\\n    /// @dev The TDN token. Represents downvotes.\\n    TDN public immutable tokenDown;\\n\\n    /// @dev This contract is immutable and non-upgradeable.\\n    /// Further versions of this contract will be deployed independently.\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @dev Seed for market creation\\n    string public constant SEED = \\\"Immutable_Ratings_by_GM_EB_MB\\\";\\n\\n    /// @dev The minimum amount of tokens that can be rated\\n    uint256 public constant MIN_RATING_AMOUNT = 1000 ether;\\n\\n    /// @dev The price of a rating in ether\\n    uint256 public ratingPrice = 0.00000007 ether;\\n\\n    /// @dev Address of the fee receiver\\n    address public receiver;\\n\\n    /// @dev Whether the contract is paused\\n    bool public isPaused = false;\\n\\n    /// @dev Mapping of active markets to their URLs\\n    mapping(address market => string url) public marketToUrl;\\n\\n    /// @dev Mapping of URLs to their markets\\n    mapping(string url => address market) public urlToMarket;\\n\\n    /// @dev Defines the structure of a rating request\\n    struct MarketRating {\\n        string url;\\n        uint256 amount;\\n    }\\n\\n    // Events\\n    event MarketCreated(address indexed marketAddress, string url);\\n    event RatingUpCreated(address indexed user, address indexed market, uint256 amount);\\n    event RatingDownCreated(address indexed user, address indexed market, uint256 amount);\\n    event ReceiverUpdated(address indexed newReceiver);\\n    event Paused(bool isPaused);\\n\\n    // Errors\\n    error ZeroAddress();\\n    error EmptyURL();\\n    error MarketAlreadyExists(string url);\\n    error InvalidRatingAmount();\\n    error InsufficientPayment();\\n    error ContractPaused();\\n\\n    /**\\n     * @dev Enforces that a function can only be called if the contract is not paused\\n     */\\n    modifier notPaused() {\\n        if (isPaused) revert ContractPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @param _tokenUp The address of the TUP token\\n     * @param _tokenDown The address of the TDN token\\n     * @param _receiver The address of the fee receiver\\n     */\\n    constructor(address _tokenUp, address _tokenDown, address _receiver) Ownable(msg.sender) {\\n        if (_tokenUp == address(0) || _tokenDown == address(0) || _receiver == address(0)) revert ZeroAddress();\\n\\n        tokenUp = TUP(_tokenUp);\\n        tokenDown = TDN(_tokenDown);\\n        receiver = _receiver;\\n    }\\n\\n    /**\\n     * Returns the total number of immutables ratings (IRs) for a user\\n     * @param user The address of the user\\n     * @return total The total number of ratings\\n     */\\n    function getUserRatings(address user) external view returns (uint256 total) {\\n        return tokenUp.upvotes(user) + tokenDown.downvotes(user);\\n    }\\n\\n    /**\\n     * @notice Sets the fee receiver address\\n     * @param _receiver The address of the fee receiver\\n     */\\n    function setReceiver(address _receiver) external onlyOwner {\\n        receiver = _receiver;\\n        emit ReceiverUpdated(_receiver);\\n    }\\n\\n    /**\\n     * @notice Pauses or unpauses the contract\\n     * @param _isPaused Whether to pause the contract\\n     */\\n    function setIsPaused(bool _isPaused) external onlyOwner {\\n        isPaused = _isPaused;\\n        emit Paused(_isPaused);\\n    }\\n\\n    /**\\n     * @notice Creates a new market for a URL\\n     * @param url The URL for the market\\n     */\\n    function createMarket(string calldata url) external notPaused {\\n        if (urlToMarket[url] != address(0)) revert MarketAlreadyExists(url);\\n        _createMarket(url);\\n    }\\n\\n    /**\\n     * @notice Gets the market address for a URL\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function getMarketAddress(string calldata url) external pure returns (address) {\\n        return _createMarketAddress(url);\\n    }\\n\\n    /**\\n     * @dev Creates a new market for a URL. It is assumed that the URL has already been validated and normalized\\n     * @param url The URL for the market.\\n     * @return marketAddress The address of the created market\\n     */\\n    function _createMarket(string calldata url) internal returns (address marketAddress) {\\n        marketAddress = _createMarketAddress(url);\\n        marketToUrl[marketAddress] = url;\\n        urlToMarket[url] = marketAddress;\\n\\n        emit MarketCreated(marketAddress, url);\\n    }\\n\\n    /**\\n     * @dev Returns a market if it exists, otherwise creates a new one\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function _getMarket(string calldata url) internal returns (address marketAddress) {\\n        marketAddress = urlToMarket[url];\\n        if (marketAddress == address(0)) {\\n            marketAddress = _createMarket(url);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a new market for a URL\\n     * @dev It is assumed that the URL has already been validated and normalized\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function _createMarketAddress(string calldata url) internal pure returns (address) {\\n        if (bytes(url).length == 0) revert EmptyURL();\\n\\n        return address(uint160(uint256(keccak256(abi.encodePacked(SEED, url)))));\\n    }\\n\\n    /**\\n     * @notice Creates an up rating for a single market\\n     * @param rating The rating to create\\n     */\\n    function createUpRating(MarketRating calldata rating) external payable nonReentrant notPaused {\\n        _validateRating(rating);\\n        _createUpRating(msg.sender, rating);\\n        _processPayment(rating.amount);\\n    }\\n\\n    /**\\n     * @notice Creates a down rating for a single market\\n     * @param rating The rating to create\\n     */\\n    function createDownRating(MarketRating calldata rating) external payable nonReentrant notPaused {\\n        _validateRating(rating);\\n        _createDownRating(msg.sender, rating);\\n        _processPayment(rating.amount);\\n    }\\n\\n    /**\\n     * @dev Creates an UP rating. Does not validate the rating amount or user count.\\n     * @param rating The rating to create\\n     */\\n    function _createUpRating(address from, MarketRating calldata rating) internal {\\n        address marketAddress = _getMarket(rating.url);\\n        tokenUp.mint(from, marketAddress, rating.amount);\\n        emit RatingUpCreated(from, marketAddress, rating.amount);\\n    }\\n\\n    /**\\n     * @dev Creates a DOWN rating. Does not validate the rating amount or user count.\\n     * @param rating The rating to create\\n     */\\n    function _createDownRating(address from, MarketRating calldata rating) internal {\\n        address marketAddress = _getMarket(rating.url);\\n        tokenDown.mint(from, marketAddress, rating.amount);\\n        emit RatingDownCreated(from, marketAddress, rating.amount);\\n    }\\n\\n    /**\\n     * @dev Validates a rating is correctly formatted\\n     *  - Amount is not 0\\n     *  - Amount is a multiple of 1 ether (prevents decimal ratings)\\n     * @param rating The rating to validate\\n     */\\n    function _validateRating(MarketRating calldata rating) internal pure {\\n        if (rating.amount % 1 ether != 0 || rating.amount < MIN_RATING_AMOUNT) {\\n            revert InvalidRatingAmount();\\n        }\\n    }\\n\\n    /**\\n     * @notice Preview the payment for a rating\\n     * @param amount The amount of tokens to rate\\n     * @return price The price of the rating\\n     */\\n    function previewPayment(uint256 amount) external view returns (uint256) {\\n        return _getRatingPrice(amount);\\n    }\\n\\n    /**\\n     * @notice Gets the market price for a rating based on the amount of tokens\\n     * @param amount The amount of tokens to rate\\n     * @return price The price of the rating\\n     */\\n    function _getRatingPrice(uint256 amount) internal view returns (uint256) {\\n        return (amount * ratingPrice) / 1 ether;\\n    }\\n\\n    /**\\n     * @notice Processes the payment for a rating, including funds distribution and excess refund\\n     * @param amount The amount of tokens to rate\\n     */\\n    function _processPayment(uint256 amount) internal {\\n        uint256 price = _getRatingPrice(amount);\\n        if (msg.value < price) revert InsufficientPayment();\\n        _refundExcessPayment(msg.value - price);\\n        _distributePayment(price);\\n    }\\n\\n    /**\\n     * @notice Refunds excess amount to the caller\\n     * @param amount The amount of tokens to refund\\n     */\\n    function _refundExcessPayment(uint256 amount) internal {\\n        if (amount > 0) {\\n            payable(msg.sender).transfer(amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes the payment to the receiver\\n     * @param amount The amount of tokens to distribute\\n     */\\n    function _distributePayment(uint256 amount) internal {\\n        payable(receiver).transfer(amount);\\n    }\\n\\n    /**\\n     * @notice Recovers ERC20 tokens from the contract\\n     * @param tokenAddress The address of the token to recover\\n     * @param recipient The address of the recipient\\n     */\\n    function recoverERC20(address tokenAddress, address recipient) external onlyOwner {\\n        if (tokenAddress == address(0) || recipient == address(0)) revert ZeroAddress();\\n        IERC20(tokenAddress).safeTransfer(recipient, IERC20(tokenAddress).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xa8b8178d29b2f8f3bb93ebc2c65c3b0e0f05fd3611db29e90ac53fabba057a87\",\"license\":\"UNLICENSED\"},\"contracts/TDN.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Thumbs Down (TDN)\\n * @author immutable-ratings\\n */\\ncontract TDN is ERC20, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    error ZeroAddress();\\n\\n    /// @dev The number of downvotes that a user has created\\n    mapping(address user => uint256 downvotes) public downvotes;\\n\\n    constructor() ERC20(\\\"Thumbs Down\\\", \\\"TDN\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Mints token to the given address\\n     * @param minter The address of the user minting the tokens\\n     * @param to The address to mint the tokens to\\n     * @param amount The amount of tokens to mint\\n     */\\n    function mint(address minter, address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n        downvotes[minter] += amount;\\n    }\\n\\n    /**\\n     * @notice Recovers ERC20 tokens from the contract\\n     * @param tokenAddress The address of the token to recover\\n     * @param recipient The address of the recipient\\n     */\\n    function recoverERC20(address tokenAddress, address recipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (tokenAddress == address(0) || recipient == address(0)) revert ZeroAddress();\\n        IERC20(tokenAddress).safeTransfer(recipient, IERC20(tokenAddress).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x6790a603327a60962a054dc87390a0cde995c28fcaf31c421301e2b8ecae1346\",\"license\":\"UNLICENSED\"},\"contracts/TUP.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Thumbs Up (TUP)\\n * @author immutable-ratings\\n */\\ncontract TUP is ERC20, AccessControl {\\n    using SafeERC20 for IERC20;\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    error ZeroAddress();\\n\\n    /// @dev The number of upvotes that a user has created\\n    mapping(address user => uint256 upvotes) public upvotes;\\n\\n    constructor() ERC20(\\\"Thumbs Up\\\", \\\"TUP\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Mints token to the given address\\n     * @param minter The address of the user minting the tokens\\n     * @param to The address to mint the tokens to\\n     * @param amount The amount of tokens to mint\\n     */\\n    function mint(address minter, address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n        upvotes[minter] += amount;\\n    }\\n\\n    /**\\n     * @notice Recovers ERC20 tokens from the contract\\n     * @param tokenAddress The address of the token to recover\\n     * @param recipient The address of the recipient\\n     */\\n    function recoverERC20(address tokenAddress, address recipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (tokenAddress == address(0) || recipient == address(0)) revert ZeroAddress();\\n        IERC20(tokenAddress).safeTransfer(recipient, IERC20(tokenAddress).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x5ed13c7cc0e0f61429bdd39b8709626bc4948c1350afe3e87c82ae46ae723499\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060405264104c533c006003556004805460ff60a01b191690553480156200002757600080fd5b5060405162001816380380620018168339810160408190526200004a916200018c565b33806200007157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007c8162000101565b5060016002556001600160a01b0383161580620000a057506001600160a01b038216155b80620000b357506001600160a01b038116155b15620000d25760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0392831660805290821660a052600480546001600160a01b03191691909216179055620001d6565b600180546001600160a01b03191690556200011c816200011f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200018757600080fd5b919050565b600080600060608486031215620001a257600080fd5b620001ad846200016f565b9250620001bd602085016200016f565b9150620001cd604085016200016f565b90509250925092565b60805160a0516115fe6200021860003960008181610395015281816109b30152610ebe0152600081816102c101528181610a3f0152610b7101526115fe6000f3fe60806040526004361061018b5760003560e01c80638da5cb5b116100d6578063e30c39781161007f578063f7260d3e11610059578063f7260d3e146104ba578063fbd8cc4c146104da578063ffa1ad74146104f057600080fd5b8063e30c39781461045c578063f2fde38b1461047a578063f50336f91461049a57600080fd5b8063a00c582e116100b0578063a00c582e146103f8578063b187bd2614610418578063c4baaa9f1461044957600080fd5b80638da5cb5b146103655780639c25cc62146103835780639f8472d4146103b757600080fd5b806354888f5511610138578063718da7ee11610112578063718da7ee1461031057806379ba509714610330578063886f039a1461034557600080fd5b806354888f551461028f5780636bfc5c6e146102af578063715018a6146102fb57600080fd5b806323da93171161016957806323da93171461023a578063240976bf1461024f57806350a1a8681461026f57600080fd5b806303994dc5146101905780630edc4737146101c657806317da760a1461020f575b600080fd5b34801561019c57600080fd5b506101b06101ab3660046110f3565b610539565b6040516101bd9190611132565b60405180910390f35b3480156101d257600080fd5b506101b06040518060400160405280601d81526020017f496d6d757461626c655f526174696e67735f62795f474d5f45425f4d4200000081525081565b34801561021b57600080fd5b5061022c683635c9adc5dea0000081565b6040519081526020016101bd565b61024d610248366004611165565b6105d3565b005b34801561025b57600080fd5b5061024d61026a3660046111a0565b610633565b34801561027b57600080fd5b5061022c61028a3660046111c2565b6106ae565b34801561029b57600080fd5b5061024d6102aa3660046111db565b6106bf565b3480156102bb57600080fd5b506102e37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bd565b34801561030757600080fd5b5061024d61075a565b34801561031c57600080fd5b5061024d61032b3660046110f3565b61076e565b34801561033c57600080fd5b5061024d6107c0565b34801561035157600080fd5b5061024d61036036600461124d565b610801565b34801561037157600080fd5b506000546001600160a01b03166102e3565b34801561038f57600080fd5b506102e37f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c357600080fd5b506102e36103d2366004611296565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b34801561040457600080fd5b506102e36104133660046111db565b6108c7565b34801561042457600080fd5b5060045461043990600160a01b900460ff1681565b60405190151581526020016101bd565b61024d610457366004611165565b6108da565b34801561046857600080fd5b506001546001600160a01b03166102e3565b34801561048657600080fd5b5061024d6104953660046110f3565b610920565b3480156104a657600080fd5b5061022c6104b53660046110f3565b610991565b3480156104c657600080fd5b506004546102e3906001600160a01b031681565b3480156104e657600080fd5b5061022c60035481565b3480156104fc57600080fd5b506101b06040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6005602052600090815260409020805461055290611347565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90611347565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b505050505081565b6105db610ab4565b600454600160a01b900460ff16156106065760405163ab35696f60e01b815260040160405180910390fd5b61060f81610adc565b6106193382610b29565b6106268160200135610c25565b6106306001600255565b50565b61063b610c6e565b60048054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906106a390831515815260200190565b60405180910390a150565b60006106b982610c9b565b92915050565b600454600160a01b900460ff16156106ea5760405163ab35696f60e01b815260040160405180910390fd5b60006001600160a01b031660068383604051610707929190611381565b908152604051908190036020019020546001600160a01b03161461074b5781816040516337afdd7160e01b8152600401610742929190611391565b60405180910390fd5b6107558282610cbe565b505050565b610762610c6e565b61076c6000610d70565b565b610776610c6e565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f75fd3aa5d9b6e2a8a9d8894008c9263200713f4b1fa9113665e09ceac002774690600090a250565b60015433906001600160a01b031681146107f85760405163118cdaa760e01b81526001600160a01b0382166004820152602401610742565b61063081610d70565b610809610c6e565b6001600160a01b038216158061082657506001600160a01b038116155b156108445760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526108c39082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b291906113c0565b6001600160a01b0385169190610d89565b5050565b60006108d38383610df0565b9392505050565b6108e2610ab4565b600454600160a01b900460ff161561090d5760405163ab35696f60e01b815260040160405180910390fd5b61091681610adc565b6106193382610e7b565b610928610c6e565b600180546001600160a01b0383166001600160a01b031990911681179091556109596000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040516324abc0b960e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906324abc0b990602401602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906113c0565b60405163daf4906d60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf4906d90602401602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906113c0565b6106b991906113ef565b6002805403610ad657604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b610af2670de0b6b3a76400006020830135611418565b151580610b0b5750683635c9adc5dea000008160200135105b156106305760405163a31fbaaf60e01b815260040160405180910390fd5b6000610b3d610b38838061142c565b610f65565b604051636361ddf360e11b81526001600160a01b0385811660048301528083166024830152602085013560448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c6c3bbe690606401600060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b50505050806001600160a01b0316836001600160a01b03167f93a8393c8cf19d12c7dec41659d1c180332cccdddc65483285d6fb00d10166628460200135604051610c1891815260200190565b60405180910390a3505050565b6000610c3082610c9b565b905080341015610c535760405163cd1c886760e01b815260040160405180910390fd5b610c65610c60823461147a565b610fa3565b6108c381610fd6565b6000546001600160a01b0316331461076c5760405163118cdaa760e01b8152336004820152602401610742565b6000670de0b6b3a764000060035483610cb4919061148d565b6106b991906114a4565b6000610cca8383610df0565b6001600160a01b0381166000908152600560205260409020909150610cf0838583611508565b508060068484604051610d04929190611381565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908216907f89e2b56dfb4365b59dc3a37aaf819ce4937e48be6ab23686edcecacf0124ae0390610d629086908690611391565b60405180910390a292915050565b600180546001600160a01b031916905561063081611010565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052610755908490611060565b6000818103610e1257604051631662e66b60e01b815260040160405180910390fd5b6040518060400160405280601d81526020017f496d6d757461626c655f526174696e67735f62795f474d5f45425f4d420000008152508383604051602001610e5c939291906115c9565b60408051601f1981840301815291905280516020909101209392505050565b6000610e8a610b38838061142c565b604051636361ddf360e11b81526001600160a01b0385811660048301528083166024830152602085013560448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c6c3bbe690606401600060405180830381600087803b158015610f0457600080fd5b505af1158015610f18573d6000803e3d6000fd5b50505050806001600160a01b0316836001600160a01b03167f4b713de7cd2c27b9508eb36ff702536841b4eac8273c0683243fde092ff5a0bd8460200135604051610c1891815260200190565b600060068383604051610f79929190611381565b908152604051908190036020019020546001600160a01b03169050806106b9576108d38383610cbe565b801561063057604051339082156108fc029083906000818181858888f193505050501580156108c3573d6000803e3d6000fd5b6004546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156108c3573d6000803e3d6000fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af180611083576040513d6000823e3d81fd5b50506000513d9150811561109b5780600114156110a8565b6001600160a01b0384163b155b156110d157604051635274afe760e01b81526001600160a01b0385166004820152602401610742565b50505050565b80356001600160a01b03811681146110ee57600080fd5b919050565b60006020828403121561110557600080fd5b6108d3826110d7565b60005b83811015611129578181015183820152602001611111565b50506000910152565b602081526000825180602084015261115181604085016020870161110e565b601f01601f19169190910160400192915050565b60006020828403121561117757600080fd5b813567ffffffffffffffff81111561118e57600080fd5b8201604081850312156108d357600080fd5b6000602082840312156111b257600080fd5b813580151581146108d357600080fd5b6000602082840312156111d457600080fd5b5035919050565b600080602083850312156111ee57600080fd5b823567ffffffffffffffff8082111561120657600080fd5b818501915085601f83011261121a57600080fd5b81358181111561122957600080fd5b86602082850101111561123b57600080fd5b60209290920196919550909350505050565b6000806040838503121561126057600080fd5b611269836110d7565b9150611277602084016110d7565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156112a857600080fd5b813567ffffffffffffffff808211156112c057600080fd5b818401915084601f8301126112d457600080fd5b8135818111156112e6576112e6611280565b604051601f8201601f19908116603f0116810190838211818310171561130e5761130e611280565b8160405282815287602084870101111561132757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061135b57607f821691505b60208210810361137b57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000602082840312156113d257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106b9576106b96113d9565b634e487b7160e01b600052601260045260246000fd5b60008261142757611427611402565b500690565b6000808335601e1984360301811261144357600080fd5b83018035915067ffffffffffffffff82111561145e57600080fd5b60200191503681900382131561147357600080fd5b9250929050565b818103818111156106b9576106b96113d9565b80820281158282048414176106b9576106b96113d9565b6000826114b3576114b3611402565b500490565b601f821115610755576000816000526020600020601f850160051c810160208610156114e15750805b601f850160051c820191505b81811015611500578281556001016114ed565b505050505050565b67ffffffffffffffff83111561152057611520611280565b6115348361152e8354611347565b836114b8565b6000601f84116001811461156857600085156115505750838201355b600019600387901b1c1916600186901b1783556115c2565b600083815260209020601f19861690835b828110156115995786850135825560209485019460019092019101611579565b50868210156115b65760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600084516115db81846020890161110e565b820183858237600093019283525090939250505056fea164736f6c6343000816000a",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c80638da5cb5b116100d6578063e30c39781161007f578063f7260d3e11610059578063f7260d3e146104ba578063fbd8cc4c146104da578063ffa1ad74146104f057600080fd5b8063e30c39781461045c578063f2fde38b1461047a578063f50336f91461049a57600080fd5b8063a00c582e116100b0578063a00c582e146103f8578063b187bd2614610418578063c4baaa9f1461044957600080fd5b80638da5cb5b146103655780639c25cc62146103835780639f8472d4146103b757600080fd5b806354888f5511610138578063718da7ee11610112578063718da7ee1461031057806379ba509714610330578063886f039a1461034557600080fd5b806354888f551461028f5780636bfc5c6e146102af578063715018a6146102fb57600080fd5b806323da93171161016957806323da93171461023a578063240976bf1461024f57806350a1a8681461026f57600080fd5b806303994dc5146101905780630edc4737146101c657806317da760a1461020f575b600080fd5b34801561019c57600080fd5b506101b06101ab3660046110f3565b610539565b6040516101bd9190611132565b60405180910390f35b3480156101d257600080fd5b506101b06040518060400160405280601d81526020017f496d6d757461626c655f526174696e67735f62795f474d5f45425f4d4200000081525081565b34801561021b57600080fd5b5061022c683635c9adc5dea0000081565b6040519081526020016101bd565b61024d610248366004611165565b6105d3565b005b34801561025b57600080fd5b5061024d61026a3660046111a0565b610633565b34801561027b57600080fd5b5061022c61028a3660046111c2565b6106ae565b34801561029b57600080fd5b5061024d6102aa3660046111db565b6106bf565b3480156102bb57600080fd5b506102e37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bd565b34801561030757600080fd5b5061024d61075a565b34801561031c57600080fd5b5061024d61032b3660046110f3565b61076e565b34801561033c57600080fd5b5061024d6107c0565b34801561035157600080fd5b5061024d61036036600461124d565b610801565b34801561037157600080fd5b506000546001600160a01b03166102e3565b34801561038f57600080fd5b506102e37f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c357600080fd5b506102e36103d2366004611296565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b34801561040457600080fd5b506102e36104133660046111db565b6108c7565b34801561042457600080fd5b5060045461043990600160a01b900460ff1681565b60405190151581526020016101bd565b61024d610457366004611165565b6108da565b34801561046857600080fd5b506001546001600160a01b03166102e3565b34801561048657600080fd5b5061024d6104953660046110f3565b610920565b3480156104a657600080fd5b5061022c6104b53660046110f3565b610991565b3480156104c657600080fd5b506004546102e3906001600160a01b031681565b3480156104e657600080fd5b5061022c60035481565b3480156104fc57600080fd5b506101b06040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6005602052600090815260409020805461055290611347565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90611347565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b505050505081565b6105db610ab4565b600454600160a01b900460ff16156106065760405163ab35696f60e01b815260040160405180910390fd5b61060f81610adc565b6106193382610b29565b6106268160200135610c25565b6106306001600255565b50565b61063b610c6e565b60048054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906106a390831515815260200190565b60405180910390a150565b60006106b982610c9b565b92915050565b600454600160a01b900460ff16156106ea5760405163ab35696f60e01b815260040160405180910390fd5b60006001600160a01b031660068383604051610707929190611381565b908152604051908190036020019020546001600160a01b03161461074b5781816040516337afdd7160e01b8152600401610742929190611391565b60405180910390fd5b6107558282610cbe565b505050565b610762610c6e565b61076c6000610d70565b565b610776610c6e565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f75fd3aa5d9b6e2a8a9d8894008c9263200713f4b1fa9113665e09ceac002774690600090a250565b60015433906001600160a01b031681146107f85760405163118cdaa760e01b81526001600160a01b0382166004820152602401610742565b61063081610d70565b610809610c6e565b6001600160a01b038216158061082657506001600160a01b038116155b156108445760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526108c39082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b291906113c0565b6001600160a01b0385169190610d89565b5050565b60006108d38383610df0565b9392505050565b6108e2610ab4565b600454600160a01b900460ff161561090d5760405163ab35696f60e01b815260040160405180910390fd5b61091681610adc565b6106193382610e7b565b610928610c6e565b600180546001600160a01b0383166001600160a01b031990911681179091556109596000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040516324abc0b960e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906324abc0b990602401602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906113c0565b60405163daf4906d60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf4906d90602401602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906113c0565b6106b991906113ef565b6002805403610ad657604051633ee5aeb560e01b815260040160405180910390fd5b60028055565b610af2670de0b6b3a76400006020830135611418565b151580610b0b5750683635c9adc5dea000008160200135105b156106305760405163a31fbaaf60e01b815260040160405180910390fd5b6000610b3d610b38838061142c565b610f65565b604051636361ddf360e11b81526001600160a01b0385811660048301528083166024830152602085013560448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c6c3bbe690606401600060405180830381600087803b158015610bb757600080fd5b505af1158015610bcb573d6000803e3d6000fd5b50505050806001600160a01b0316836001600160a01b03167f93a8393c8cf19d12c7dec41659d1c180332cccdddc65483285d6fb00d10166628460200135604051610c1891815260200190565b60405180910390a3505050565b6000610c3082610c9b565b905080341015610c535760405163cd1c886760e01b815260040160405180910390fd5b610c65610c60823461147a565b610fa3565b6108c381610fd6565b6000546001600160a01b0316331461076c5760405163118cdaa760e01b8152336004820152602401610742565b6000670de0b6b3a764000060035483610cb4919061148d565b6106b991906114a4565b6000610cca8383610df0565b6001600160a01b0381166000908152600560205260409020909150610cf0838583611508565b508060068484604051610d04929190611381565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908216907f89e2b56dfb4365b59dc3a37aaf819ce4937e48be6ab23686edcecacf0124ae0390610d629086908690611391565b60405180910390a292915050565b600180546001600160a01b031916905561063081611010565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052610755908490611060565b6000818103610e1257604051631662e66b60e01b815260040160405180910390fd5b6040518060400160405280601d81526020017f496d6d757461626c655f526174696e67735f62795f474d5f45425f4d420000008152508383604051602001610e5c939291906115c9565b60408051601f1981840301815291905280516020909101209392505050565b6000610e8a610b38838061142c565b604051636361ddf360e11b81526001600160a01b0385811660048301528083166024830152602085013560448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063c6c3bbe690606401600060405180830381600087803b158015610f0457600080fd5b505af1158015610f18573d6000803e3d6000fd5b50505050806001600160a01b0316836001600160a01b03167f4b713de7cd2c27b9508eb36ff702536841b4eac8273c0683243fde092ff5a0bd8460200135604051610c1891815260200190565b600060068383604051610f79929190611381565b908152604051908190036020019020546001600160a01b03169050806106b9576108d38383610cbe565b801561063057604051339082156108fc029083906000818181858888f193505050501580156108c3573d6000803e3d6000fd5b6004546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156108c3573d6000803e3d6000fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af180611083576040513d6000823e3d81fd5b50506000513d9150811561109b5780600114156110a8565b6001600160a01b0384163b155b156110d157604051635274afe760e01b81526001600160a01b0385166004820152602401610742565b50505050565b80356001600160a01b03811681146110ee57600080fd5b919050565b60006020828403121561110557600080fd5b6108d3826110d7565b60005b83811015611129578181015183820152602001611111565b50506000910152565b602081526000825180602084015261115181604085016020870161110e565b601f01601f19169190910160400192915050565b60006020828403121561117757600080fd5b813567ffffffffffffffff81111561118e57600080fd5b8201604081850312156108d357600080fd5b6000602082840312156111b257600080fd5b813580151581146108d357600080fd5b6000602082840312156111d457600080fd5b5035919050565b600080602083850312156111ee57600080fd5b823567ffffffffffffffff8082111561120657600080fd5b818501915085601f83011261121a57600080fd5b81358181111561122957600080fd5b86602082850101111561123b57600080fd5b60209290920196919550909350505050565b6000806040838503121561126057600080fd5b611269836110d7565b9150611277602084016110d7565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156112a857600080fd5b813567ffffffffffffffff808211156112c057600080fd5b818401915084601f8301126112d457600080fd5b8135818111156112e6576112e6611280565b604051601f8201601f19908116603f0116810190838211818310171561130e5761130e611280565b8160405282815287602084870101111561132757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061135b57607f821691505b60208210810361137b57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000602082840312156113d257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106b9576106b96113d9565b634e487b7160e01b600052601260045260246000fd5b60008261142757611427611402565b500690565b6000808335601e1984360301811261144357600080fd5b83018035915067ffffffffffffffff82111561145e57600080fd5b60200191503681900382131561147357600080fd5b9250929050565b818103818111156106b9576106b96113d9565b80820281158282048414176106b9576106b96113d9565b6000826114b3576114b3611402565b500490565b601f821115610755576000816000526020600020601f850160051c810160208610156114e15750805b601f850160051c820191505b81811015611500578281556001016114ed565b505050505050565b67ffffffffffffffff83111561152057611520611280565b6115348361152e8354611347565b836114b8565b6000601f84116001811461156857600085156115505750838201355b600019600387901b1c1916600186901b1783556115c2565b600083815260209020601f19861690835b828110156115995786850135825560209485019460019092019101611579565b50868210156115b65760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600084516115db81846020890161110e565b820183858237600093019283525090939250505056fea164736f6c6343000816000a",
  "devdoc": {
    "author": "immutable-ratings",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "params": {
          "_receiver": "The address of the fee receiver",
          "_tokenDown": "The address of the TDN token",
          "_tokenUp": "The address of the TUP token"
        }
      },
      "createDownRating((string,uint256))": {
        "params": {
          "rating": "The rating to create"
        }
      },
      "createMarket(string)": {
        "params": {
          "url": "The URL for the market"
        }
      },
      "createUpRating((string,uint256))": {
        "params": {
          "rating": "The rating to create"
        }
      },
      "getMarketAddress(string)": {
        "params": {
          "url": "The URL for the market"
        },
        "returns": {
          "_0": "marketAddress The address of the created market"
        }
      },
      "getUserRatings(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "total": "The total number of ratings"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "previewPayment(uint256)": {
        "params": {
          "amount": "The amount of tokens to rate"
        },
        "returns": {
          "_0": "price The price of the rating"
        }
      },
      "recoverERC20(address,address)": {
        "params": {
          "recipient": "The address of the recipient",
          "tokenAddress": "The address of the token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setIsPaused(bool)": {
        "params": {
          "_isPaused": "Whether to pause the contract"
        }
      },
      "setReceiver(address)": {
        "params": {
          "_receiver": "The address of the fee receiver"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      }
    },
    "stateVariables": {
      "MIN_RATING_AMOUNT": {
        "details": "The minimum amount of tokens that can be rated"
      },
      "SEED": {
        "details": "Seed for market creation"
      },
      "VERSION": {
        "details": "This contract is immutable and non-upgradeable. Further versions of this contract will be deployed independently."
      },
      "isPaused": {
        "details": "Whether the contract is paused"
      },
      "marketToUrl": {
        "details": "Mapping of active markets to their URLs"
      },
      "ratingPrice": {
        "details": "The price of a rating in ether"
      },
      "receiver": {
        "details": "Address of the fee receiver"
      },
      "tokenDown": {
        "details": "The TDN token. Represents downvotes."
      },
      "tokenUp": {
        "details": "The TUP token. Represents upvotes."
      },
      "urlToMarket": {
        "details": "Mapping of URLs to their markets"
      }
    },
    "title": "Immutable Ratings",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDownRating((string,uint256))": {
        "notice": "Creates a down rating for a single market"
      },
      "createMarket(string)": {
        "notice": "Creates a new market for a URL"
      },
      "createUpRating((string,uint256))": {
        "notice": "Creates an up rating for a single market"
      },
      "getMarketAddress(string)": {
        "notice": "Gets the market address for a URL"
      },
      "getUserRatings(address)": {
        "notice": "Returns the total number of immutables ratings (IRs) for a user"
      },
      "previewPayment(uint256)": {
        "notice": "Preview the payment for a rating"
      },
      "recoverERC20(address,address)": {
        "notice": "Recovers ERC20 tokens from the contract"
      },
      "setIsPaused(bool)": {
        "notice": "Pauses or unpauses the contract"
      },
      "setReceiver(address)": {
        "notice": "Sets the fee receiver address"
      }
    },
    "notice": "Core controller contract for the Immutable Ratings platform",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 535,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1908,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2050,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "ratingPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2053,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "receiver",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2057,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "isPaused",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2062,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "marketToUrl",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2067,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "urlToMarket",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}