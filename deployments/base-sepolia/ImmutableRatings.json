{
  "address": "0xa7F2e133604A663395d7E4f008faCB94c097DcB3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenUp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDown",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyURL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatingAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MarketAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MarketDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RatingDownCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RatingUpCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RATING_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEED",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating",
          "name": "rating",
          "type": "tuple"
        }
      ],
      "name": "createDownRating",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating[]",
          "name": "upRatings",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating[]",
          "name": "downRatings",
          "type": "tuple[]"
        }
      ],
      "name": "createRatings",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ImmutableRatings.MarketRating",
          "name": "rating",
          "type": "tuple"
        }
      ],
      "name": "createUpRating",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "getMarketAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserRatings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "marketToUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "previewPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDown",
      "outputs": [
        {
          "internalType": "contract TDN",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenUp",
      "outputs": [
        {
          "internalType": "contract TUP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "urlToMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userRatingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "up",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "down",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a305713dcce235f38b6e7c902e348ad473375441b50c4a3db0a0689e860f177",
  "receipt": {
    "to": null,
    "from": "0x4415b58946aF3c33e2D19bD4191BB286Ad7e1C14",
    "contractAddress": "0xa7F2e133604A663395d7E4f008faCB94c097DcB3",
    "transactionIndex": 9,
    "gasUsed": "1340441",
    "logsBloom": "0x
    "blockHash": "0xd907359634487dfe1280e37b0f38cdbc754fdd144e73c2d6025572d06d006275",
    "transactionHash": "0x5a305713dcce235f38b6e7c902e348ad473375441b50c4a3db0a0689e860f177",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 23632848,
        "transactionHash": "0x5a305713dcce235f38b6e7c902e348ad473375441b50c4a3db0a0689e860f177",
        "address": "0xa7F2e133604A663395d7E4f008faCB94c097DcB3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004415b58946af3c33e2d19bd4191bb286ad7e1c14",
          "0x0000000000000000000000004415b58946af3c33e2d19bd4191bb286ad7e1c14"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0xd907359634487dfe1280e37b0f38cdbc754fdd144e73c2d6025572d06d006275"
      }
    ],
    "blockNumber": 23632848,
    "cumulativeGasUsed": "2994141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9E8765f0958F7FafD5c15F4F24E7e0a9c03f61e1",
    "0x14932F95a27364e9d27E899EBA1f6F54C11429b4",
    "0x30e7120ce8c0ABA197f1C4EccF2F4E1e1C75ab1d"
  ],
  "numDeployments": 1,
  "solcInputHash": "0b29e335d33cebce2e63b63f42d519c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenUp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDown\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyURL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatingAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MarketAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MarketDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RatingDownCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RatingUpCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RATING_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating\",\"name\":\"rating\",\"type\":\"tuple\"}],\"name\":\"createDownRating\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating[]\",\"name\":\"upRatings\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating[]\",\"name\":\"downRatings\",\"type\":\"tuple[]\"}],\"name\":\"createRatings\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ImmutableRatings.MarketRating\",\"name\":\"rating\",\"type\":\"tuple\"}],\"name\":\"createUpRating\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"marketToUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"previewPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDown\",\"outputs\":[{\"internalType\":\"contract TDN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUp\",\"outputs\":[{\"internalType\":\"contract TUP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"urlToMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRatingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"up\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"down\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"createDownRating((string,uint256))\":{\"params\":{\"rating\":\"The rating to create\"}},\"createMarket(string)\":{\"params\":{\"url\":\"The URL for the market\"}},\"createRatings((string,uint256)[],(string,uint256)[])\":{\"params\":{\"downRatings\":\"Array of MarketRating structs for downvotes\",\"upRatings\":\"Array of MarketRating structs for upvotes\"}},\"createUpRating((string,uint256))\":{\"params\":{\"rating\":\"The rating to create\"}},\"getMarketAddress(string)\":{\"params\":{\"url\":\"The URL for the market\"},\"returns\":{\"_0\":\"marketAddress The address of the created market\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUserRatings(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"total\":\"The total number of ratings\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"previewPayment(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to rate\"},\"returns\":{\"_0\":\"price The price of the rating\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setReceiver(address)\":{\"params\":{\"_receiver\":\"The address of the fee receiver\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"MIN_RATING_AMOUNT\":{\"details\":\"The minimum amount of tokens that can be rated\"},\"SEED\":{\"details\":\"Seed for market creation\"},\"marketToUrl\":{\"details\":\"Mapping of active markets to their URLs\"},\"ratingPrice\":{\"details\":\"The price of a rating in ether\"},\"receiver\":{\"details\":\"Address of the fee receiver\"},\"urlToMarket\":{\"details\":\"Mapping of URLs to their markets\"},\"userRatingCount\":{\"details\":\"Mapping of users rating counts\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDownRating((string,uint256))\":{\"notice\":\"Creates a down rating for a single market\"},\"createMarket(string)\":{\"notice\":\"Creates a new market for a URL\"},\"createRatings((string,uint256)[],(string,uint256)[])\":{\"notice\":\"Creates ratings for multiple markets\"},\"createUpRating((string,uint256))\":{\"notice\":\"Creates an up rating for a single market\"},\"getMarketAddress(string)\":{\"notice\":\"Gets the market address for a URL\"},\"getUserRatings(address)\":{\"notice\":\"Returns the total number of ratings for a user\"},\"previewPayment(uint256)\":{\"notice\":\"Preview the payment for a rating\"},\"setReceiver(address)\":{\"notice\":\"Sets the fee receiver address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableRatings.sol\":\"ImmutableRatings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/ImmutableRatings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {TUP} from \\\"./TUP.sol\\\";\\nimport {TDN} from \\\"./TDN.sol\\\";\\n\\ncontract ImmutableRatings is AccessControl, ReentrancyGuard {\\n    TUP public immutable tokenUp;\\n    TDN public immutable tokenDown;\\n\\n    /// @dev Seed for market creation\\n    string public constant SEED = \\\"immutable_ratings\\\";\\n\\n    /// @dev The minimum amount of tokens that can be rated\\n    uint256 public constant MIN_RATING_AMOUNT = 1000 ether;\\n\\n    /// @dev The price of a rating in ether\\n    uint256 public ratingPrice = 0.00000007 ether;\\n\\n    /// @dev Address of the fee receiver\\n    address public receiver;\\n\\n    /// @dev Mapping of active markets to their URLs\\n    mapping(address market => string url) public marketToUrl;\\n\\n    /// @dev Mapping of URLs to their markets\\n    mapping(string url => address market) public urlToMarket;\\n\\n    /// @dev Mapping of users rating counts\\n    mapping(address user => RatingCount ratingCount) public userRatingCount;\\n\\n    /// @dev Defines the structure of a rating request\\n    struct MarketRating {\\n        string url;\\n        uint256 amount;\\n    }\\n\\n    /// @dev Defines the structure of a stored rating count\\n    struct RatingCount {\\n        uint256 up;\\n        uint256 down;\\n    }\\n\\n    // Events\\n    event MarketCreated(address indexed marketAddress, string url);\\n    event RatingUpCreated(address indexed user, address indexed market, uint256 amount);\\n    event RatingDownCreated(address indexed user, address indexed market, uint256 amount);\\n\\n    // Errors\\n    error EmptyURL();\\n    error MarketAlreadyExists(string url);\\n    error MarketDoesNotExist(string url);\\n    error InvalidRatingAmount();\\n    error InsufficientPayment();\\n\\n    constructor(address _tokenUp, address _tokenDown, address _receiver) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        tokenUp = TUP(_tokenUp);\\n        tokenDown = TDN(_tokenDown);\\n        receiver = _receiver;\\n    }\\n\\n    /**\\n     * Returns the total number of ratings for a user\\n     * @param user The address of the user\\n     * @return total The total number of ratings\\n     */\\n    function getUserRatings(address user) external view returns (uint256 total) {\\n        return userRatingCount[user].up + userRatingCount[user].down;\\n    }\\n\\n    /**\\n     * @notice Sets the fee receiver address\\n     * @param _receiver The address of the fee receiver\\n     */\\n    function setReceiver(address _receiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        receiver = _receiver;\\n    }\\n\\n    /**\\n     * @notice Creates a new market for a URL\\n     * @param url The URL for the market\\n     */\\n    function createMarket(string calldata url) external {\\n        if (urlToMarket[url] != address(0)) revert MarketAlreadyExists(url);\\n\\n        _createMarket(url);\\n    }\\n\\n    /**\\n     * @notice Gets the market address for a URL\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function getMarketAddress(string calldata url) external pure returns (address) {\\n        return _createMarketAddress(url);\\n    }\\n\\n    /**\\n     * @dev Creates a new market for a URL\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function _createMarket(string calldata url) internal returns (address marketAddress) {\\n        marketAddress = _createMarketAddress(url);\\n        marketToUrl[marketAddress] = url;\\n        urlToMarket[url] = marketAddress;\\n\\n        emit MarketCreated(marketAddress, url);\\n    }\\n\\n    /**\\n     * @dev Returns a market if it exists, otherwise creates a new one\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function _getMarket(string calldata url) internal returns (address marketAddress) {\\n        marketAddress = urlToMarket[url];\\n        if (marketAddress == address(0)) {\\n            marketAddress = _createMarket(url);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a new market for a URL\\n     * @param url The URL for the market\\n     * @return marketAddress The address of the created market\\n     */\\n    function _createMarketAddress(string calldata url) internal pure returns (address) {\\n        if (bytes(url).length == 0) revert EmptyURL();\\n\\n        return address(uint160(uint256(keccak256(abi.encodePacked(SEED, url)))));\\n    }\\n\\n    /**\\n     * @notice Creates an up rating for a single market\\n     * @param rating The rating to create\\n     */\\n    function createUpRating(MarketRating calldata rating) external payable nonReentrant {\\n        _validateRating(rating);\\n        _createUpRating(rating);\\n        userRatingCount[msg.sender].up += rating.amount;\\n\\n        if (msg.value < _getRatingPrice(rating.amount)) revert InsufficientPayment();\\n        _distributePayment(msg.value);\\n    }\\n\\n    /**\\n     * @notice Creates a down rating for a single market\\n     * @param rating The rating to create\\n     */\\n    function createDownRating(MarketRating calldata rating) external payable nonReentrant {\\n        _validateRating(rating);\\n        _createDownRating(rating);\\n        userRatingCount[msg.sender].down += rating.amount;\\n\\n        if (msg.value < _getRatingPrice(rating.amount)) revert InsufficientPayment();\\n        _distributePayment(msg.value);\\n    }\\n\\n    /**\\n     * @notice Creates ratings for multiple markets\\n     * @param upRatings Array of MarketRating structs for upvotes\\n     * @param downRatings Array of MarketRating structs for downvotes\\n     */\\n    function createRatings(\\n        MarketRating[] calldata upRatings,\\n        MarketRating[] calldata downRatings\\n    ) external payable nonReentrant {\\n        uint256 totalUp = 0;\\n        uint256 totalDown = 0;\\n\\n        // Process UP votes\\n        uint256 iUp = 0;\\n        uint256 lengthUp = upRatings.length;\\n        for (iUp; iUp < lengthUp; ++iUp) {\\n            MarketRating calldata rating = upRatings[iUp];\\n            _validateRating(rating);\\n            _createUpRating(rating);\\n            totalUp += rating.amount;\\n        }\\n\\n        // Process DOWN votes\\n        uint256 iDown = 0;\\n        uint256 lengthDown = downRatings.length;\\n        for (iDown; iDown < lengthDown; ++iDown) {\\n            MarketRating calldata rating = downRatings[iDown];\\n            _validateRating(rating);\\n            _createDownRating(rating);\\n            totalDown += rating.amount;\\n        }\\n\\n        if (msg.value < _getRatingPrice(totalUp + totalDown)) revert InsufficientPayment();\\n\\n        // Update user rating count\\n        userRatingCount[msg.sender].up += totalUp;\\n        userRatingCount[msg.sender].down += totalDown;\\n\\n        _distributePayment(msg.value);\\n    }\\n\\n    /**\\n     * @dev Creates an UP rating. Does not validate the rating amount or user count.\\n     * @param rating The rating to create\\n     */\\n    function _createUpRating(MarketRating calldata rating) internal {\\n        address marketAddress = _getMarket(rating.url);\\n        tokenUp.mint(marketAddress, rating.amount);\\n        emit RatingUpCreated(msg.sender, marketAddress, rating.amount);\\n    }\\n\\n    /**\\n     * @dev Creates a DOWN rating. Does not validate the rating amount or user count.\\n     * @param rating The rating to create\\n     */\\n    function _createDownRating(MarketRating calldata rating) internal {\\n        address marketAddress = _getMarket(rating.url);\\n        tokenDown.mint(marketAddress, rating.amount);\\n        emit RatingDownCreated(msg.sender, marketAddress, rating.amount);\\n    }\\n\\n    /**\\n     * @dev Validates a rating is correctly formatted\\n     * @param rating The rating to validate\\n     */\\n    function _validateRating(MarketRating calldata rating) internal pure {\\n        if (rating.amount == 0 || rating.amount % 1 ether != 0) revert InvalidRatingAmount();\\n    }\\n\\n    /**\\n     * @notice Preview the payment for a rating\\n     * @param amount The amount of tokens to rate\\n     * @return price The price of the rating\\n     */\\n    function previewPayment(uint256 amount) external view returns (uint256) {\\n        return _getRatingPrice(amount);\\n    }\\n\\n    /**\\n     * @notice Gets the market price for a rating based on the amount of tokens\\n     * @param amount The amount of tokens to rate\\n     * @return price The price of the rating\\n     */\\n    function _getRatingPrice(uint256 amount) internal view returns (uint256) {\\n        if (amount < MIN_RATING_AMOUNT) revert InvalidRatingAmount();\\n        return (amount * ratingPrice) / 1 ether;\\n    }\\n\\n    /**\\n     * @notice Distributes the payment to the receiver\\n     * @param amount The amount of tokens to distribute\\n     */\\n    function _distributePayment(uint256 amount) internal {\\n        payable(receiver).transfer(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2c5a89598e6fe3523f409c3485acac8ebf7c6e570d74ab2d171db883e48c1986\",\"license\":\"UNLICENSED\"},\"contracts/TDN.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TDN is ERC20, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"Thumbs Down\\\", \\\"TDN\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Mints token to the given address\\n     * @param to The address to mint the tokens to\\n     * @param amount The amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7850760b97775afc6240cc8c7d8f37b66bbddc6b5aa706c9c9d0e94c55761a87\",\"license\":\"UNLICENSED\"},\"contracts/TUP.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TUP is ERC20, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"Thumbs Up\\\", \\\"TUP\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Mints token to the given address\\n     * @param to The address to mint the tokens to\\n     * @param amount The amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1861b19a846275207c8ee42e01b183548775de0a3989dfc4abf852e349233437\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060405264104c533c006002553480156200001a57600080fd5b506040516200174f3803806200174f8339810160408190526200003d916200014a565b600180556200004e6000336200007e565b506001600160a01b0392831660805290821660a052600380546001600160a01b0319169190921617905562000194565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000123576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620000da3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000127565b5060005b92915050565b80516001600160a01b03811681146200014557600080fd5b919050565b6000806000606084860312156200016057600080fd5b6200016b846200012d565b92506200017b602085016200012d565b91506200018b604085016200012d565b90509250925092565b60805160a051611587620001c8600039600081816104490152610bf40152600081816103990152610a8801526115876000f3fe60806040526004361061018b5760003560e01c80636bfc5c6e116100d6578063a217fddf1161007f578063f50336f911610059578063f50336f914610514578063f7260d3e14610534578063fbd8cc4c1461055457600080fd5b8063a217fddf146104cc578063c4baaa9f146104e1578063d547741f146104f457600080fd5b80639c25cc62116100b05780639c25cc62146104375780639f8472d41461046b578063a00c582e146104ac57600080fd5b80636bfc5c6e14610387578063718da7ee146103d357806391d14854146103f357600080fd5b8063280fa69c1161013857806350a1a8681161011257806350a1a868146102fe57806354888f551461031e578063656f35221461033e57600080fd5b8063280fa69c146102ab5780632f2ff15d146102be57806336568abe146102de57600080fd5b806317da760a1161016957806317da760a1461023b57806323da931714610266578063248a9ca31461027b57600080fd5b806301ffc9a71461019057806303994dc5146101c55780630edc4737146101f2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004610fa4565b61056a565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101e56101e0366004610fea565b6105a1565b6040516101bc9190611029565b3480156101fe57600080fd5b506101e56040518060400160405280601181526020017f696d6d757461626c655f726174696e677300000000000000000000000000000081525081565b34801561024757600080fd5b50610258683635c9adc5dea0000081565b6040519081526020016101bc565b61027961027436600461105c565b61063b565b005b34801561028757600080fd5b50610258610296366004611097565b60009081526020819052604090206001015490565b6102796102b93660046110fc565b6106c2565b3480156102ca57600080fd5b506102796102d9366004611168565b61082a565b3480156102ea57600080fd5b506102796102f9366004611168565b61084f565b34801561030a57600080fd5b50610258610319366004611097565b610887565b34801561032a57600080fd5b50610279610339366004611194565b610892565b34801561034a57600080fd5b50610372610359366004610fea565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152016101bc565b34801561039357600080fd5b506103bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bc565b3480156103df57600080fd5b506102796103ee366004610fea565b6108fd565b3480156103ff57600080fd5b506101b061040e366004611168565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561044357600080fd5b506103bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047757600080fd5b506103bb61048636600461121c565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b3480156104b857600080fd5b506103bb6104c7366004611194565b610938565b3480156104d857600080fd5b50610258600081565b6102796104ef36600461105c565b61094b565b34801561050057600080fd5b5061027961050f366004611168565b61098d565b34801561052057600080fd5b5061025861052f366004610fea565b6109b2565b34801561054057600080fd5b506003546103bb906001600160a01b031681565b34801561056057600080fd5b5061025860025481565b60006001600160e01b03198216637965db0b60e01b148061059b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600460205260009081526040902080546105ba906112cd565b80601f01602080910402602001604051908101604052809291908181526020018280546105e6906112cd565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b505050505081565b6106436109db565b61064c81610a05565b61065581610a48565b336000908152600660209081526040822080549184013592909161067a90849061131d565b9091555061068d90506020820135610b2e565b3410156106ad5760405163cd1c886760e01b815260040160405180910390fd5b6106b634610b7b565b6106bf60018055565b50565b6106ca6109db565b60008080855b8082101561072d57368888848181106106eb576106eb611330565b90506020028101906106fd9190611346565b905061070881610a05565b61071181610a48565b61071f60208201358661131d565b9450508160010191506106d0565b6000855b8082101561078e573688888481811061074c5761074c611330565b905060200281019061075e9190611346565b905061076981610a05565b61077281610bb9565b61078060208201358761131d565b955050816001019150610731565b6107a061079b868861131d565b610b2e565b3410156107c05760405163cd1c886760e01b815260040160405180910390fd5b33600090815260066020526040812080548892906107df90849061131d565b9091555050336000908152600660205260408120600101805487929061080690849061131d565b90915550610815905034610b7b565b50505050505061082460018055565b50505050565b60008281526020819052604090206001015461084581610c92565b6108248383610c9c565b6001600160a01b03811633146108785760405163334bd91960e11b815260040160405180910390fd5b6108828282610d46565b505050565b600061059b82610b2e565b60006001600160a01b0316600583836040516108af929190611366565b908152604051908190036020019020546001600160a01b0316146108f35781816040516337afdd7160e01b81526004016108ea929190611376565b60405180910390fd5b6108828282610dc9565b600061090881610c92565b506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006109448383610e88565b9392505050565b6109536109db565b61095c81610a05565b61096581610bb9565b336000908152600660209081526040822060010180549184013592909161067a90849061131d565b6000828152602081905260409020600101546109a881610c92565b6108248383610d46565b6001600160a01b03811660009081526006602052604081206001810154905461059b919061131d565b6002600154036109fe57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60208101351580610a2a5750610a27670de0b6b3a764000060208301356113bb565b15155b156106bf5760405163a31fbaaf60e01b815260040160405180910390fd5b6000610a5c610a5783806113cf565b610f13565b6040516340c10f1960e01b81526001600160a01b038083166004830152602085013560248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505060405160208086013582526001600160a01b03851693503392507f93a8393c8cf19d12c7dec41659d1c180332cccdddc65483285d6fb00d101666291015b60405180910390a35050565b6000683635c9adc5dea00000821015610b5a5760405163a31fbaaf60e01b815260040160405180910390fd5b670de0b6b3a764000060025483610b719190611416565b61059b919061142d565b6003546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610bb5573d6000803e3d6000fd5b5050565b6000610bc8610a5783806113cf565b6040516340c10f1960e01b81526001600160a01b038083166004830152602085013560248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b505060405160208086013582526001600160a01b03851693503392507f4b713de7cd2c27b9508eb36ff702536841b4eac8273c0683243fde092ff5a0bd9101610b22565b6106bf8133610f51565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610d3e576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610cf63390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161059b565b50600061059b565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1615610d3e576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161059b565b6000610dd58383610e88565b6001600160a01b0381166000908152600460205260409020909150610dfb838583611491565b508060058484604051610e0f929190611366565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff19909116179055908216907f89e2b56dfb4365b59dc3a37aaf819ce4937e48be6ab23686edcecacf0124ae0390610e7a9086908690611376565b60405180910390a292915050565b6000818103610eaa57604051631662e66b60e01b815260040160405180910390fd5b6040518060400160405280601181526020017f696d6d757461626c655f726174696e67730000000000000000000000000000008152508383604051602001610ef493929190611552565b60408051601f1981840301815291905280516020909101209392505050565b600060058383604051610f27929190611366565b908152604051908190036020019020546001600160a01b031690508061059b576109448383610dc9565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610bb55760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016108ea565b600060208284031215610fb657600080fd5b81356001600160e01b03198116811461094457600080fd5b80356001600160a01b0381168114610fe557600080fd5b919050565b600060208284031215610ffc57600080fd5b61094482610fce565b60005b83811015611020578181015183820152602001611008565b50506000910152565b6020815260008251806020840152611048816040850160208701611005565b601f01601f19169190910160400192915050565b60006020828403121561106e57600080fd5b813567ffffffffffffffff81111561108557600080fd5b82016040818503121561094457600080fd5b6000602082840312156110a957600080fd5b5035919050565b60008083601f8401126110c257600080fd5b50813567ffffffffffffffff8111156110da57600080fd5b6020830191508360208260051b85010111156110f557600080fd5b9250929050565b6000806000806040858703121561111257600080fd5b843567ffffffffffffffff8082111561112a57600080fd5b611136888389016110b0565b9096509450602087013591508082111561114f57600080fd5b5061115c878288016110b0565b95989497509550505050565b6000806040838503121561117b57600080fd5b8235915061118b60208401610fce565b90509250929050565b600080602083850312156111a757600080fd5b823567ffffffffffffffff808211156111bf57600080fd5b818501915085601f8301126111d357600080fd5b8135818111156111e257600080fd5b8660208285010111156111f457600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561122e57600080fd5b813567ffffffffffffffff8082111561124657600080fd5b818401915084601f83011261125a57600080fd5b81358181111561126c5761126c611206565b604051601f8201601f19908116603f0116810190838211818310171561129457611294611206565b816040528281528760208487010111156112ad57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c908216806112e157607f821691505b60208210810361130157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561059b5761059b611307565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261135c57600080fd5b9190910192915050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601260045260246000fd5b6000826113ca576113ca6113a5565b500690565b6000808335601e198436030181126113e657600080fd5b83018035915067ffffffffffffffff82111561140157600080fd5b6020019150368190038213156110f557600080fd5b808202811582820484141761059b5761059b611307565b60008261143c5761143c6113a5565b500490565b601f821115610882576000816000526020600020601f850160051c8101602086101561146a5750805b601f850160051c820191505b8181101561148957828155600101611476565b505050505050565b67ffffffffffffffff8311156114a9576114a9611206565b6114bd836114b783546112cd565b83611441565b6000601f8411600181146114f157600085156114d95750838201355b600019600387901b1c1916600186901b17835561154b565b600083815260209020601f19861690835b828110156115225786850135825560209485019460019092019101611502565b508682101561153f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60008451611564818460208901611005565b820183858237600093019283525090939250505056fea164736f6c6343000816000a",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c80636bfc5c6e116100d6578063a217fddf1161007f578063f50336f911610059578063f50336f914610514578063f7260d3e14610534578063fbd8cc4c1461055457600080fd5b8063a217fddf146104cc578063c4baaa9f146104e1578063d547741f146104f457600080fd5b80639c25cc62116100b05780639c25cc62146104375780639f8472d41461046b578063a00c582e146104ac57600080fd5b80636bfc5c6e14610387578063718da7ee146103d357806391d14854146103f357600080fd5b8063280fa69c1161013857806350a1a8681161011257806350a1a868146102fe57806354888f551461031e578063656f35221461033e57600080fd5b8063280fa69c146102ab5780632f2ff15d146102be57806336568abe146102de57600080fd5b806317da760a1161016957806317da760a1461023b57806323da931714610266578063248a9ca31461027b57600080fd5b806301ffc9a71461019057806303994dc5146101c55780630edc4737146101f2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004610fa4565b61056a565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101e56101e0366004610fea565b6105a1565b6040516101bc9190611029565b3480156101fe57600080fd5b506101e56040518060400160405280601181526020017f696d6d757461626c655f726174696e677300000000000000000000000000000081525081565b34801561024757600080fd5b50610258683635c9adc5dea0000081565b6040519081526020016101bc565b61027961027436600461105c565b61063b565b005b34801561028757600080fd5b50610258610296366004611097565b60009081526020819052604090206001015490565b6102796102b93660046110fc565b6106c2565b3480156102ca57600080fd5b506102796102d9366004611168565b61082a565b3480156102ea57600080fd5b506102796102f9366004611168565b61084f565b34801561030a57600080fd5b50610258610319366004611097565b610887565b34801561032a57600080fd5b50610279610339366004611194565b610892565b34801561034a57600080fd5b50610372610359366004610fea565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152016101bc565b34801561039357600080fd5b506103bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bc565b3480156103df57600080fd5b506102796103ee366004610fea565b6108fd565b3480156103ff57600080fd5b506101b061040e366004611168565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561044357600080fd5b506103bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047757600080fd5b506103bb61048636600461121c565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b3480156104b857600080fd5b506103bb6104c7366004611194565b610938565b3480156104d857600080fd5b50610258600081565b6102796104ef36600461105c565b61094b565b34801561050057600080fd5b5061027961050f366004611168565b61098d565b34801561052057600080fd5b5061025861052f366004610fea565b6109b2565b34801561054057600080fd5b506003546103bb906001600160a01b031681565b34801561056057600080fd5b5061025860025481565b60006001600160e01b03198216637965db0b60e01b148061059b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600460205260009081526040902080546105ba906112cd565b80601f01602080910402602001604051908101604052809291908181526020018280546105e6906112cd565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b505050505081565b6106436109db565b61064c81610a05565b61065581610a48565b336000908152600660209081526040822080549184013592909161067a90849061131d565b9091555061068d90506020820135610b2e565b3410156106ad5760405163cd1c886760e01b815260040160405180910390fd5b6106b634610b7b565b6106bf60018055565b50565b6106ca6109db565b60008080855b8082101561072d57368888848181106106eb576106eb611330565b90506020028101906106fd9190611346565b905061070881610a05565b61071181610a48565b61071f60208201358661131d565b9450508160010191506106d0565b6000855b8082101561078e573688888481811061074c5761074c611330565b905060200281019061075e9190611346565b905061076981610a05565b61077281610bb9565b61078060208201358761131d565b955050816001019150610731565b6107a061079b868861131d565b610b2e565b3410156107c05760405163cd1c886760e01b815260040160405180910390fd5b33600090815260066020526040812080548892906107df90849061131d565b9091555050336000908152600660205260408120600101805487929061080690849061131d565b90915550610815905034610b7b565b50505050505061082460018055565b50505050565b60008281526020819052604090206001015461084581610c92565b6108248383610c9c565b6001600160a01b03811633146108785760405163334bd91960e11b815260040160405180910390fd5b6108828282610d46565b505050565b600061059b82610b2e565b60006001600160a01b0316600583836040516108af929190611366565b908152604051908190036020019020546001600160a01b0316146108f35781816040516337afdd7160e01b81526004016108ea929190611376565b60405180910390fd5b6108828282610dc9565b600061090881610c92565b506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006109448383610e88565b9392505050565b6109536109db565b61095c81610a05565b61096581610bb9565b336000908152600660209081526040822060010180549184013592909161067a90849061131d565b6000828152602081905260409020600101546109a881610c92565b6108248383610d46565b6001600160a01b03811660009081526006602052604081206001810154905461059b919061131d565b6002600154036109fe57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60208101351580610a2a5750610a27670de0b6b3a764000060208301356113bb565b15155b156106bf5760405163a31fbaaf60e01b815260040160405180910390fd5b6000610a5c610a5783806113cf565b610f13565b6040516340c10f1960e01b81526001600160a01b038083166004830152602085013560248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505060405160208086013582526001600160a01b03851693503392507f93a8393c8cf19d12c7dec41659d1c180332cccdddc65483285d6fb00d101666291015b60405180910390a35050565b6000683635c9adc5dea00000821015610b5a5760405163a31fbaaf60e01b815260040160405180910390fd5b670de0b6b3a764000060025483610b719190611416565b61059b919061142d565b6003546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610bb5573d6000803e3d6000fd5b5050565b6000610bc8610a5783806113cf565b6040516340c10f1960e01b81526001600160a01b038083166004830152602085013560248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b505060405160208086013582526001600160a01b03851693503392507f4b713de7cd2c27b9508eb36ff702536841b4eac8273c0683243fde092ff5a0bd9101610b22565b6106bf8133610f51565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610d3e576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610cf63390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161059b565b50600061059b565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1615610d3e576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161059b565b6000610dd58383610e88565b6001600160a01b0381166000908152600460205260409020909150610dfb838583611491565b508060058484604051610e0f929190611366565b90815260405190819003602001812080546001600160a01b0393841673ffffffffffffffffffffffffffffffffffffffff19909116179055908216907f89e2b56dfb4365b59dc3a37aaf819ce4937e48be6ab23686edcecacf0124ae0390610e7a9086908690611376565b60405180910390a292915050565b6000818103610eaa57604051631662e66b60e01b815260040160405180910390fd5b6040518060400160405280601181526020017f696d6d757461626c655f726174696e67730000000000000000000000000000008152508383604051602001610ef493929190611552565b60408051601f1981840301815291905280516020909101209392505050565b600060058383604051610f27929190611366565b908152604051908190036020019020546001600160a01b031690508061059b576109448383610dc9565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610bb55760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016108ea565b600060208284031215610fb657600080fd5b81356001600160e01b03198116811461094457600080fd5b80356001600160a01b0381168114610fe557600080fd5b919050565b600060208284031215610ffc57600080fd5b61094482610fce565b60005b83811015611020578181015183820152602001611008565b50506000910152565b6020815260008251806020840152611048816040850160208701611005565b601f01601f19169190910160400192915050565b60006020828403121561106e57600080fd5b813567ffffffffffffffff81111561108557600080fd5b82016040818503121561094457600080fd5b6000602082840312156110a957600080fd5b5035919050565b60008083601f8401126110c257600080fd5b50813567ffffffffffffffff8111156110da57600080fd5b6020830191508360208260051b85010111156110f557600080fd5b9250929050565b6000806000806040858703121561111257600080fd5b843567ffffffffffffffff8082111561112a57600080fd5b611136888389016110b0565b9096509450602087013591508082111561114f57600080fd5b5061115c878288016110b0565b95989497509550505050565b6000806040838503121561117b57600080fd5b8235915061118b60208401610fce565b90509250929050565b600080602083850312156111a757600080fd5b823567ffffffffffffffff808211156111bf57600080fd5b818501915085601f8301126111d357600080fd5b8135818111156111e257600080fd5b8660208285010111156111f457600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561122e57600080fd5b813567ffffffffffffffff8082111561124657600080fd5b818401915084601f83011261125a57600080fd5b81358181111561126c5761126c611206565b604051601f8201601f19908116603f0116810190838211818310171561129457611294611206565b816040528281528760208487010111156112ad57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c908216806112e157607f821691505b60208210810361130157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561059b5761059b611307565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261135c57600080fd5b9190910192915050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601260045260246000fd5b6000826113ca576113ca6113a5565b500690565b6000808335601e198436030181126113e657600080fd5b83018035915067ffffffffffffffff82111561140157600080fd5b6020019150368190038213156110f557600080fd5b808202811582820484141761059b5761059b611307565b60008261143c5761143c6113a5565b500490565b601f821115610882576000816000526020600020601f850160051c8101602086101561146a5750805b601f850160051c820191505b8181101561148957828155600101611476565b505050505050565b67ffffffffffffffff8311156114a9576114a9611206565b6114bd836114b783546112cd565b83611441565b6000601f8411600181146114f157600085156114d95750838201355b600019600387901b1c1916600186901b17835561154b565b600083815260209020601f19861690835b828110156115225786850135825560209485019460019092019101611502565b508682101561153f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60008451611564818460208901611005565b820183858237600093019283525090939250505056fea164736f6c6343000816000a",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "createDownRating((string,uint256))": {
        "params": {
          "rating": "The rating to create"
        }
      },
      "createMarket(string)": {
        "params": {
          "url": "The URL for the market"
        }
      },
      "createRatings((string,uint256)[],(string,uint256)[])": {
        "params": {
          "downRatings": "Array of MarketRating structs for downvotes",
          "upRatings": "Array of MarketRating structs for upvotes"
        }
      },
      "createUpRating((string,uint256))": {
        "params": {
          "rating": "The rating to create"
        }
      },
      "getMarketAddress(string)": {
        "params": {
          "url": "The URL for the market"
        },
        "returns": {
          "_0": "marketAddress The address of the created market"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUserRatings(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "total": "The total number of ratings"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "previewPayment(uint256)": {
        "params": {
          "amount": "The amount of tokens to rate"
        },
        "returns": {
          "_0": "price The price of the rating"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setReceiver(address)": {
        "params": {
          "_receiver": "The address of the fee receiver"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "MIN_RATING_AMOUNT": {
        "details": "The minimum amount of tokens that can be rated"
      },
      "SEED": {
        "details": "Seed for market creation"
      },
      "marketToUrl": {
        "details": "Mapping of active markets to their URLs"
      },
      "ratingPrice": {
        "details": "The price of a rating in ether"
      },
      "receiver": {
        "details": "Address of the fee receiver"
      },
      "urlToMarket": {
        "details": "Mapping of URLs to their markets"
      },
      "userRatingCount": {
        "details": "Mapping of users rating counts"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDownRating((string,uint256))": {
        "notice": "Creates a down rating for a single market"
      },
      "createMarket(string)": {
        "notice": "Creates a new market for a URL"
      },
      "createRatings((string,uint256)[],(string,uint256)[])": {
        "notice": "Creates ratings for multiple markets"
      },
      "createUpRating((string,uint256))": {
        "notice": "Creates an up rating for a single market"
      },
      "getMarketAddress(string)": {
        "notice": "Gets the market address for a URL"
      },
      "getUserRatings(address)": {
        "notice": "Returns the total number of ratings for a user"
      },
      "previewPayment(uint256)": {
        "notice": "Preview the payment for a rating"
      },
      "setReceiver(address)": {
        "notice": "Sets the fee receiver address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1674,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1804,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "ratingPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1807,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "receiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1812,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "marketToUrl",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1817,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "urlToMarket",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 1823,
        "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
        "label": "userRatingCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(RatingCount)1835_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(RatingCount)1835_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ImmutableRatings.RatingCount)",
        "numberOfBytes": "32",
        "value": "t_struct(RatingCount)1835_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RatingCount)1835_storage": {
        "encoding": "inplace",
        "label": "struct ImmutableRatings.RatingCount",
        "members": [
          {
            "astId": 1832,
            "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
            "label": "up",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1834,
            "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
            "label": "down",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/ImmutableRatings.sol:ImmutableRatings",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
